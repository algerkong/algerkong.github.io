<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://47.93.91.138:5500</id>
    <title>Alger&apos;s blog</title>
    <updated>2020-08-27T08:50:02.694Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://47.93.91.138:5500"/>
    <link rel="self" href="http://47.93.91.138:5500/atom.xml"/>
    <subtitle>春风得意马蹄疾,一日看尽长安花.
</subtitle>
    <logo>http://47.93.91.138:5500/images/avatar.png</logo>
    <icon>http://47.93.91.138:5500/favicon.ico</icon>
    <rights>All rights reserved 2020, Alger&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[正则表达式学习🏓]]></title>
        <id>http://47.93.91.138:5500/zheng-ze-biao-da-shi-xue-xi/</id>
        <link href="http://47.93.91.138:5500/zheng-ze-biao-da-shi-xue-xi/">
        </link>
        <updated>2020-03-13T02:58:10.000Z</updated>
        <summary type="html"><![CDATA[<p>正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。</p>
<p>正则表达式是繁琐的，但它是强大的，学会之后的应用会让你除了提高效率外，会给你带来绝对的成就感。</p>
]]></summary>
        <content type="html"><![CDATA[<p>正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。</p>
<p>正则表达式是繁琐的，但它是强大的，学会之后的应用会让你除了提高效率外，会给你带来绝对的成就感。</p>
<!-- more -->
<p>下面是一长串我不一定看的东西</p>
<h2 id="表达式字符">表达式字符</h2>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>\</td>
<td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，'n' 匹配字符 &quot;n&quot;。'\n' 匹配一个换行符。序列 '\' 匹配 &quot;&quot; 而 &quot;(&quot; 则匹配 &quot;(&quot;。</td>
</tr>
<tr>
<td>^</td>
<td>匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 '\n' 或 '\r' 之后的位置。</td>
</tr>
<tr>
<td>$</td>
<td>匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 '\n' 或 '\r' 之前的位置。</td>
</tr>
<tr>
<td>*</td>
<td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 &quot;z&quot; 以及 &quot;zoo&quot;。* 等价于{0,}。</td>
</tr>
<tr>
<td>+</td>
<td>匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 &quot;zo&quot; 以及 &quot;zoo&quot;，但不能匹配 &quot;z&quot;。+ 等价于 {1,}。</td>
</tr>
<tr>
<td>?</td>
<td>匹配前面的子表达式零次或一次。例如，&quot;do(es)?&quot; 可以匹配 &quot;do&quot; 或 &quot;does&quot; 。? 等价于 {0,1}。</td>
</tr>
<tr>
<td>{n}</td>
<td>n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 &quot;Bob&quot; 中的 'o'，但是能匹配 &quot;food&quot; 中的两个 o。</td>
</tr>
<tr>
<td>{n,}</td>
<td>n 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 &quot;Bob&quot; 中的 'o'，但能匹配 &quot;foooood&quot; 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。</td>
</tr>
<tr>
<td>{n,m}</td>
<td>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，&quot;o{1,3}&quot; 将匹配 &quot;fooooood&quot; 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。</td>
</tr>
<tr>
<td>?</td>
<td>当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 &quot;oooo&quot;，'o+?' 将匹配单个 &quot;o&quot;，而 'o+' 将匹配所有 'o'。</td>
</tr>
<tr>
<td>.</td>
<td>匹配除换行符（\n、\r）之外的任何单个字符。要匹配包括 '\n' 在内的任何字符，请使用像&quot;<strong>(.|\n)</strong>&quot;的模式。</td>
</tr>
<tr>
<td>(pattern)</td>
<td>匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 '(' 或 ')'。</td>
</tr>
<tr>
<td>(?:pattern)</td>
<td>匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 &quot;或&quot; 字符 (|) 来组合一个模式的各个部分是很有用。例如， 'industr(?:y|ies) 就是一个比 'industry|industries' 更简略的表达式。</td>
</tr>
<tr>
<td>(?=pattern)</td>
<td>正向肯定预查（look ahead positive assert），在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，&quot;Windows(?=95|98|NT|2000)&quot;能匹配&quot;Windows2000&quot;中的&quot;Windows&quot;，但不能匹配&quot;Windows3.1&quot;中的&quot;Windows&quot;。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>
</tr>
<tr>
<td>(?!pattern)</td>
<td>正向否定预查(negative assert)，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如&quot;Windows(?!95|98|NT|2000)&quot;能匹配&quot;Windows3.1&quot;中的&quot;Windows&quot;，但不能匹配&quot;Windows2000&quot;中的&quot;Windows&quot;。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>
</tr>
<tr>
<td>(?&lt;=pattern)</td>
<td>反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反。例如，&quot;<code>(?&lt;=95|98|NT|2000)Windows</code>&quot;能匹配&quot;<code>2000Windows</code>&quot;中的&quot;<code>Windows</code>&quot;，但不能匹配&quot;<code>3.1Windows</code>&quot;中的&quot;<code>Windows</code>&quot;。</td>
</tr>
<tr>
<td>(?&lt;!pattern)</td>
<td>反向否定预查，与正向否定预查类似，只是方向相反。例如&quot;<code>(?&quot;能匹配&quot;</code>3.1Windows<code>&quot;中的&quot;</code>Windows<code>&quot;，但不能匹配&quot;</code>2000Windows<code>&quot;中的&quot;</code>Windows`&quot;。</td>
</tr>
<tr>
<td>x|y</td>
<td>匹配 x 或 y。例如，'z|food' 能匹配 &quot;z&quot; 或 &quot;food&quot;。'(z|f)ood' 则匹配 &quot;zood&quot; 或 &quot;food&quot;。</td>
</tr>
<tr>
<td>[xyz]</td>
<td>字符集合。匹配所包含的任意一个字符。例如， '[abc]' 可以匹配 &quot;plain&quot; 中的 'a'。</td>
</tr>
<tr>
<td>[^xyz]</td>
<td>负值字符集合。匹配未包含的任意字符。例如， '[^abc]' 可以匹配 &quot;plain&quot; 中的'p'、'l'、'i'、'n'。</td>
</tr>
<tr>
<td>[a-z]</td>
<td>字符范围。匹配指定范围内的任意字符。例如，'[a-z]' 可以匹配 'a' 到 'z' 范围内的任意小写字母字符。</td>
</tr>
<tr>
<td>[^a-z]</td>
<td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，'[^a-z]' 可以匹配任何不在 'a' 到 'z' 范围内的任意字符。</td>
</tr>
<tr>
<td>\b</td>
<td>匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\b' 可以匹配&quot;never&quot; 中的 'er'，但不能匹配 &quot;verb&quot; 中的 'er'。</td>
</tr>
<tr>
<td>\B</td>
<td>匹配非单词边界。'er\B' 能匹配 &quot;verb&quot; 中的 'er'，但不能匹配 &quot;never&quot; 中的 'er'。</td>
</tr>
<tr>
<td>\cx</td>
<td>匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。</td>
</tr>
<tr>
<td>\d</td>
<td>匹配一个数字字符。等价于 [0-9]。</td>
</tr>
<tr>
<td>\D</td>
<td>匹配一个非数字字符。等价于 [^0-9]。</td>
</tr>
<tr>
<td>\f</td>
<td>匹配一个换页符。等价于 \x0c 和 \cL。</td>
</tr>
<tr>
<td>\n</td>
<td>匹配一个换行符。等价于 \x0a 和 \cJ。</td>
</tr>
<tr>
<td>\r</td>
<td>匹配一个回车符。等价于 \x0d 和 \cM。</td>
</tr>
<tr>
<td>\s</td>
<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td>
</tr>
<tr>
<td>\S</td>
<td>匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td>
</tr>
<tr>
<td>\t</td>
<td>匹配一个制表符。等价于 \x09 和 \cI。</td>
</tr>
<tr>
<td>\v</td>
<td>匹配一个垂直制表符。等价于 \x0b 和 \cK。</td>
</tr>
<tr>
<td>\w</td>
<td>匹配字母、数字、下划线。等价于'[A-Za-z0-9_]'。</td>
</tr>
<tr>
<td>\W</td>
<td>匹配非字母、数字、下划线。等价于 '[^A-Za-z0-9_]'。</td>
</tr>
<tr>
<td>\xn</td>
<td>匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，'\x41' 匹配 &quot;A&quot;。'\x041' 则等价于 '\x04' &amp; &quot;1&quot;。正则表达式中可以使用 ASCII 编码。</td>
</tr>
<tr>
<td>\num</td>
<td>匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，'(.)\1' 匹配两个连续的相同字符。</td>
</tr>
<tr>
<td>\n</td>
<td>标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td>
</tr>
<tr>
<td>\nm</td>
<td>标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</td>
</tr>
<tr>
<td>\nml</td>
<td>如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td>
</tr>
<tr>
<td>\un</td>
<td>匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td>
</tr>
</tbody>
</table>
<h2 id="正则例子">正则例子</h2>
<ol>
<li>
<p>电话号码</p>
<p>((\d{3})|\d{3}-)?\d{8}       电话号📞</p>
<p>（）表示一组字符</p>
<p>((\d{3}))表示3个数字</p>
<p>|  表示或者</p>
<p>\d{3}-表示三个数字加一个杠  即123-</p>
<figure data-type="image" tabindex="1"><img src="https://s2.ax1x.com/2020/03/04/3om8sS.md.png" alt="3om8sS.md.png" loading="lazy"></figure>
</li>
<li>
<p>手机号</p>
<p>^1[3456789]\d{9}</p>
<p>^1表示以1开头</p>
<p>[3456789]表示其中一个数字</p>
<p>\d{9}表示9个数字</p>
<figure data-type="image" tabindex="2"><img src="https://s2.ax1x.com/2020/03/04/3ondTH.png" alt="3ondTH.png" loading="lazy"></figure>
</li>
</ol>
<blockquote>
<p>好了就这样，简单不（我觉得不简单）✨</p>
<p>下期见🎃</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ ASP.NET用PlaceHolder动态添加组件实现单选题目]]></title>
        <id>http://47.93.91.138:5500/aspnet-yong-placeholder-dong-tai-tian-jia-zu-jian-shi-xian-dan-xuan-ti-mu/</id>
        <link href="http://47.93.91.138:5500/aspnet-yong-placeholder-dong-tai-tian-jia-zu-jian-shi-xian-dan-xuan-ti-mu/">
        </link>
        <updated>2020-03-13T02:55:36.000Z</updated>
        <summary type="html"><![CDATA[<p>利用<code>PlaceHolder</code>控件实现一个包含单项选择题的测试页面，其中题目信息包含于数组中。</p>
]]></summary>
        <content type="html"><![CDATA[<p>利用<code>PlaceHolder</code>控件实现一个包含单项选择题的测试页面，其中题目信息包含于数组中。</p>
<!-- more -->
<p>ASP页面🎈</p>
<pre><code class="language-asp"> &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;
     &lt;div&gt;
         &lt;asp:PlaceHolder ID=&quot;PlaceHolder1&quot; runat=&quot;server&quot;&gt;&lt;/asp:PlaceHolder&gt;
         &lt;br /&gt;
         &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; Text=&quot;Button&quot; OnClick=&quot;Button1_Click&quot; /&gt;
     &lt;/div&gt;
&lt;/form&gt;
</code></pre>
<p>类文件🎈（多选）</p>
<pre><code class="language-C#">protected void Page_Load(object sender, EventArgs e)
{
    //题目
    string[,] tit = new string[2, 4] 
    { 
        {   &quot;(1）数a分解质因数是a=2×2×3，数b分解质因数是b=2×2×5，数a和数b的最大公因数是（）&quot;,
         &quot;(2)已知3个数的和是470，第一个数比第二个数多160，第三个数比第一个数少180，这三个数的最大公因数是（)&quot;,
         &quot;（3）下列选项中的数是序数的是（)&quot;,
         &quot;（4）某地区的电话号码是一个八位数，已知其前四位数是一个固定数6869，那么该地区最多可安装（）部电话。&quot;
        },
        //答案
        {&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;C&quot;}
    };
    //选项
    string[,] answer = new string[4, 4]
    { 
        { &quot;A 2&quot;, &quot;B 4&quot;, &quot;C 6 &quot;, &quot;D 60&quot; }, 
        { &quot;A 20&quot;, &quot;B 12&quot;, &quot;C 10&quot;, &quot;D 2&quot; }, 
        { &quot;A 6只鸡&quot;, &quot;B 5支铅笔&quot;, &quot;C 2栋楼房&quot;, &quot;D 第2节课&quot; }, 
        { &quot;A 6869 &quot;, &quot;B 9999 &quot;, &quot;C 10000&quot;, &quot;D 10001&quot; }
    };

    for(int j = 0; j&lt;4; j++)
    {
        Label title = new Label();     //动态添加题目
        title.ID = &quot;title&quot;+j.ToString();
        title.Text = tit[0,j];
        PlaceHolder1.Controls.Add(title);

        CheckBoxList check = new CheckBoxList();//题目添加选项
        check.ID = &quot;check&quot; + j.ToString();
        for (int i = 0; i &lt; 4; i++)
        {
            check.Items.Add(answer[j, i]);
        }
        PlaceHolder1.Controls.Add(check);
    }
}
</code></pre>
<p>这个是多选的代码，单选页面美化麻烦一点</p>
<p>类文件🎈（单选）</p>
<pre><code class="language-C#">protected void Page_Load(object sender, EventArgs e)
{
    //题目
    string[,] tit = new string[2, 4] 
    { 
        {   &quot;(1）数a分解质因数是a=2×2×3，数b分解质因数是b=2×2×5，数a和数b的最大公因数是（）&quot;,
         &quot;(2)已知3个数的和是470，第一个数比第二个数多160，第三个数比第一个数少180，这三个数的最大公因数是（)&quot;,
         &quot;（3）下列选项中的数是序数的是（)&quot;,
         &quot;（4）某地区的电话号码是一个八位数，已知其前四位数是一个固定数6869，那么该地区最多可安装（）部电话。&quot;
        },
        {&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;C&quot;}//答案
    };
    //选项
    string[,] answer = new string[4, 4]
    { 
        { &quot;A 2&quot;, &quot;B 4&quot;, &quot;C 6 &quot;, &quot;D 60&quot; }, 
        { &quot;A 20&quot;, &quot;B 12&quot;, &quot;C 10&quot;, &quot;D 2&quot; }, 
        { &quot;A 6只鸡&quot;, &quot;B 5支铅笔&quot;, &quot;C 2栋楼房&quot;, &quot;D 第2节课&quot; }, 
        { &quot;A 6869 &quot;, &quot;B 9999 &quot;, &quot;C 10000&quot;, &quot;D 10001&quot; }
    };

    for(int j = 0; j&lt;4; j++)
    {
        Label title = new Label();     //动态添加题目
        title.ID = &quot;title&quot;+j.ToString();
        title.Text = tit[0,j];
        PlaceHolder1.Controls.Add(title);

        RadioButton[] radio = new RadioButton[4];
        for (int k = 0; k &lt; 4; k++)
        {
            radio[k] = new RadioButton();
            radio[k].ID = &quot;radio&quot; + j.ToString() + &quot;_&quot; + k.ToString();
            radio[k].GroupName = &quot;radio&quot; + j.ToString();
            radio[k].Text = answer[j, k];
            PlaceHolder1.Controls.Add(radio[k]);
        }
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript基础- 数据类型🔨]]></title>
        <id>http://47.93.91.138:5500/javascript-ji-chu-shu-ju-lei-xing/</id>
        <link href="http://47.93.91.138:5500/javascript-ji-chu-shu-ju-lei-xing/">
        </link>
        <updated>2020-03-13T02:53:28.000Z</updated>
        <summary type="html"><![CDATA[<p>ES5中有六种数据类型<br>
js中的数据类型为字面变量 以它的值来定义数据类型</p>
]]></summary>
        <content type="html"><![CDATA[<p>ES5中有六种数据类型<br>
js中的数据类型为字面变量 以它的值来定义数据类型</p>
<!-- more -->
<p><strong>ES5中有六种数据类型</strong></p>
<ol>
<li>string</li>
<li>Number</li>
<li>Boolean</li>
<li>Null</li>
<li>undefined</li>
<li>Symbol ES6</li>
<li>Object</li>
</ol>
<p><strong>js中的数据类型为字面变量   以它的值来定义数据类型</strong></p>
<ol>
<li>
<p>字符串的定义，可以使用单引号也可以使用双引号 但是不能混用，可以使用转义字符</p>
<pre><code class="language-html">&lt;script&gt;
	let a = &quot;hello world&quot;;
    a = 'hello world';
    a=&quot;我说：'刘俊杰很帅'&quot;;
    a='我说：&quot;刘俊杰很帅&quot;'
    a=&quot;我说：\&quot;刘俊杰很帅\&quot;&quot;
&lt;/script&gt;
</code></pre>
</li>
<li>
<p>数值型的定义</p>
<p>在js中所有的数字都是<strong>Number类型</strong> 包含整数和小数</p>
<pre><code class="language-html"> &lt;script&gt;
     let a = 123;
     a = 123.12;
     console.log(a);
&lt;/script&gt;
</code></pre>
<p>有最大值和最小值，还有一个无穷大的值 <strong>Infinity</strong></p>
<p>还有<strong>不能运算的类型</strong>NaN（如0/0）或者字符串运算</p>
<p><strong>typeof运算符可以检查一个变量或数值的类型</strong></p>
<p><strong>进行浮点运算会出现误差     不建议用来进行金钱运算</strong></p>
<p><strong>进制转换</strong> 0x开头表示八进制   0b表示二进制</p>
</li>
<li>
<p>布尔数据类型boolean</p>
<p>逻辑判断 <strong>true</strong>       <strong>false</strong></p>
</li>
<li>
<p>null类型</p>
<p><strong>null类型只有一个值null</strong></p>
</li>
<li>
<p>undefined数据类型</p>
<p><strong>表示一个数值没有被赋值</strong></p>
</li>
</ol>
<p><strong>强制类型装换</strong>可以把一种类型转换成另一种</p>
<p><strong>1. 调用方法   toString()</strong>    有局限性</p>
<pre><code class="language-html">&lt;script&gt;
    let a = 123;
    console.log(a.toString());
&lt;/script&gt;
</code></pre>
<p>**2. 调用String()函数 **    可以转换所有</p>
<pre><code class="language-html">&lt;script&gt;
    let a = 123;
    console.log(String(a));
&lt;/script&gt;
</code></pre>
<p><strong>3. Number()函数可以把字符串转换为数字</strong></p>
<p>只能转换纯数字字符串，空格和空转换为0</p>
<pre><code class="language-html">&lt;script&gt;
    let a = &quot;123546&quot;;
&lt;/script&gt;
</code></pre>
<p><strong>4. parseInt() 和 parseFloat(方法可以忽略字符自把前面的数字转换</strong></p>
<p>两个方法转换非字符串类型会将其先转换为字符串再取数字</p>
<p>parseInt()可以用来间接取整</p>
<pre><code class="language-html">&lt;script&gt;
	let a = &quot;123546.456fsdsf&quot;;
	//把整数部分取出来转换为整数
    console.log(parseInt(a));
    //把小数部分取出来转换为小数
    console.log(parseFloat(a));
&lt;/script&gt;
</code></pre>
<p><strong>5. 转换成Boolean类型 使用 Boolean()函数</strong></p>
<p><strong>将数值类型转换为boolean时</strong>  除了<strong>0</strong>和<strong>NaN</strong>为<strong>false</strong>其他都是<strong>true</strong></p>
<p><strong>将字符串转换为boolean时</strong>   除了<strong>空字符串</strong>为<strong>false</strong>其他都转换为<strong>true</strong>包括空格</p>
<p><strong>将null转换为Boolean时</strong>     只有一个值为<strong>false</strong></p>
<p><strong>将undefined转换为boolean时</strong>   只有一个值为<strong>false</strong></p>
<p><strong>将对象Object转换为boolean时</strong>    只要引用不为空都是<strong>true</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript----Vue.js基础学习 🚀]]></title>
        <id>http://47.93.91.138:5500/javascript-vuejs-ji-chu-xue-xi/</id>
        <link href="http://47.93.91.138:5500/javascript-vuejs-ji-chu-xue-xi/">
        </link>
        <updated>2020-03-13T02:51:17.000Z</updated>
        <summary type="html"><![CDATA[<p>Vue 是一套用于构建用户界面的渐进式框架Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。能够为复杂的单页应用提供驱动。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Vue 是一套用于构建用户界面的渐进式框架Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。能够为复杂的单页应用提供驱动。</p>
<!-- more -->
<h3 id="第一个vue项目">第一个Vue项目</h3>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;zh&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Title&lt;/title&gt;
    &lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;p id=&quot;app&quot;&gt;
    {{massage}}
&lt;/p&gt;

&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;
    let app = new Vue({
        el:'#app',
        data:{
            massage:&quot;Hello World!&quot;
        }
    })
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="el挂载点">el挂载点：</h3>
<p>vue实例的<strong>作用范围</strong>是：<strong>el</strong>选项<strong>命中的元素</strong>及其内部的<strong>后代元素</strong></p>
<blockquote>
<p>Vue可以使用其他的选择器，最好是使用ID选择器</p>
<p>可以使用双标签，不能使用HTML和body</p>
</blockquote>
<h3 id="data数据对象">data:数据对象</h3>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
    {{massage}}
    &lt;h1&gt;{{school.name}}&lt;/br&gt;{{school.mobile}}&lt;/h1&gt;
	&lt;ul&gt;
        &lt;li&gt;{{ campus[0] }}&lt;/li&gt;
        &lt;li&gt;{{ campus[2] }}&lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;


&lt;script&gt;
    let app = new Vue({
        el:'#app',
        data:{
            massage:&quot;Hello World!&quot;,
            school:{
                name:&quot;刘俊杰&quot;,
                mobile:&quot;1455048564&quot;
            },
            campus:[&quot;山西&quot;,&quot;徐州&quot;,&quot;长治&quot;]
        }
    });
&lt;/script&gt;
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://s2.ax1x.com/2020/02/20/3ZhcQg.png" alt="3ZhcQg.png" loading="lazy"></figure>
<h3 id="v-text指令">v-text指令</h3>
<p><strong>使用了v-text属性之后标签中的文字不再显示</strong></p>
<p><strong>v-text</strong> 和 **{{}}**中都可以使用表达式       如：字符串拼接</p>
<pre><code class="language-html"> &lt;div id=&quot;app&quot;&gt;
     &lt;h2 v-text=&quot;message+'！帅哥'&quot;&gt;&lt;/h2&gt;
     &lt;h2 v-text=&quot;info&quot;&gt;&lt;/h2&gt;
     &lt;h2&gt;{{ message }}&lt;/h2&gt;
&lt;/div&gt;

&lt;script&gt;
    let app = new Vue({
        el: &quot;#app&quot;,
        data: {
            message: &quot;刘俊杰&quot;,
            info: &quot;移动应用开发&quot;
        }
    })
&lt;/script&gt;
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://uploader.shimo.im/f/wGGSdzJpVccxox3Z.png!thumbnail" alt="效果图" loading="lazy"></figure>
<h3 id="v-html指令">v-html指令</h3>
<figure data-type="image" tabindex="3"><img src="https://uploader.shimo.im/f/Lc7l7PZgdn49K4oZ.png!thumbnail" alt="" loading="lazy"></figure>
<pre><code class="language-html">	&lt;div id=&quot;app&quot;&gt;
        &lt;p v-html=&quot;message&quot;&gt;&lt;/p&gt;
        &lt;p v-html=&quot;content&quot;&gt;&lt;/p&gt;
    &lt;/div&gt;

	 &lt;script&gt;
        let app = new Vue({
            el:&quot;#app&quot;,
            data:{
                message:&quot;Hello World&quot;,
                content:&quot;&lt;a href='http://www.baidu.com'&gt;百度&lt;/a&gt;&quot;
            }
        })
    &lt;/script&gt;
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://uploader.shimo.im/f/5PmVPlH8rWkokEgk.png!thumbnail" alt="" loading="lazy"></figure>
<h3 id="v-on指令">v-on指令</h3>
<p>可以简写为@</p>
<figure data-type="image" tabindex="5"><img src="https://uploader.shimo.im/f/RksEn7sRq0MADs10.png!thumbnail" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="6"><img src="https://uploader.shimo.im/f/zkReSAbLUxMpMLVq.png!thumbnail" alt="" loading="lazy"></figure>
<pre><code class="language-html">	&lt;div id=&quot;app&quot;&gt;
        &lt;input type=&quot;button&quot; value=&quot;v-on指令&quot; v-on:click=&quot;doIt&quot;&gt;
        &lt;input type=&quot;button&quot; value=&quot;v-on指令简写为 @&quot; @click=&quot;doIt&quot;&gt;
        &lt;input type=&quot;button&quot; value=&quot;v-on双击&quot; @dblclick=&quot;doIt&quot;&gt;
        &lt;h2 @click=&quot;changeFood&quot;&gt;{{ food }}&lt;/h2&gt;
    &lt;/div&gt;

    &lt;script&gt;
        let app = new Vue({
            el:&quot;#app&quot;,
            data:{
                food:&quot;西红柿炒鸡蛋&quot;
            },
            methods:{
                doIt:function(){
                    alert(&quot;hello&quot;);
                },
                changeFood:function(){
                    this.food+=&quot;非常好吃！！&quot;
                }
            }
        })
    &lt;/script&gt;
</code></pre>
<pre><code class="language-html">	&lt;div id=&quot;app&quot;&gt;
        &lt;input type=&quot;button&quot; value=&quot;dianji&quot; @click=&quot;doIt(666,'老铁')&quot;&gt;
        &lt;input type=&quot;text&quot; @keyup.enter=&quot;sayHi&quot; name=&quot;&quot; id=&quot;&quot;&gt;
    &lt;/div&gt;

    &lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;
    &lt;script&gt;
        let app = new Vue({
            el:&quot;#app&quot;,
            data:{

            },
            methods:{
                doIt:function(p1,p2){
                    console.log(&quot;做it&quot;);
                    console.log(p1);
                    console.log(p2);
                },
                sayHi:function(){
                    alert(&quot;吃了没&quot;);
                }
            }
        })
    &lt;/script&gt;

</code></pre>
<h3 id="案例计数器">案例计数器</h3>
<pre><code class="language-html">	&lt;div id=&quot;app&quot;&gt;
        &lt;button @click=&quot;redNum&quot;&gt;-&lt;/button&gt;
        &lt;span&gt;{{ num }}&lt;/span&gt;
        &lt;button @click=&quot;addNum&quot;&gt;+&lt;/button&gt;
    &lt;/div&gt;

    &lt;script&gt;    
        let app = new Vue({
            el:&quot;#app&quot;,
            data:{
                num:0   
            },
            methods:{
                addNum:function(){
                    if(this.num&lt;10){
                        this.num++;
                    }else{
                        alert(&quot;已经最大了，不要再点了&quot;);
                    }
                },
                redNum:function(){
                    if(this.num&gt;0){
                        this.num--;
                    }else{
                        alert(&quot;已经最小了，不要再点了&quot;);
                    }
                }
                
            }
        })
    &lt;/script&gt;
</code></pre>
<figure data-type="image" tabindex="7"><img src="https://uploader.shimo.im/f/06z8aCxE2I4BB6Rt.png!thumbnail" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="8"><img src="https://uploader.shimo.im/f/9adZUzga8y0Sth8W.png!thumbnail" alt="" loading="lazy"></figure>
<h3 id="v-show">v-show</h3>
<p><strong>控制元素的显示状态</strong> 只是操作样式</p>
<figure data-type="image" tabindex="9"><img src="https://uploader.shimo.im/f/eRJzOgqhmboH0KnB.png!thumbnail" alt="" loading="lazy"></figure>
<pre><code class="language-html">	&lt;div id=&quot;app&quot;&gt;
        &lt;input type=&quot;button&quot; value=&quot;隐藏或显示&quot; @click=&quot;clickShow&quot;&gt;
        &lt;input type=&quot;button&quot; value=&quot;age++++++&quot; @click=&quot;addAge&quot;&gt;
        &lt;h1 v-show=&quot;isShow&quot; style=&quot;background: red; color: white;&quot;&gt;Hello world&lt;/h1&gt;
        &lt;h1 v-show=&quot;age&lt;=18&quot; style=&quot;background: red; color: white;&quot;&gt;Hello world!!!!!!!!!!!!!&lt;/h1&gt;
        
    &lt;/div&gt;
    &lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;
    &lt;script&gt;
        let app = new Vue({
            el:&quot;#app&quot;,
            data:{
                isShow:false,
                age:18
            },
            methods:{
                clickShow:function(){
                    this.isShow = !this.isShow;
                },
                addAge:function(){
                    this.age++;
                }
            }
        })

    &lt;/script&gt;
</code></pre>
<h3 id="v-if">v-if</h3>
<p>和 <strong>v-show</strong>显示效果相同但是 <strong>v-if</strong>是直接操控DOM把标签移除</p>
<figure data-type="image" tabindex="10"><img src="https://uploader.shimo.im/f/Qu3hulmkhiMx7ZjK.png!thumbnail" alt="" loading="lazy"></figure>
<pre><code class="language-html">	&lt;div id=&quot;app&quot;&gt;
        &lt;input type=&quot;button&quot; value=&quot;隐藏或显示&quot; @click=&quot;clickShow&quot;&gt;
        &lt;input type=&quot;button&quot; value=&quot;age++++++&quot; @click=&quot;addAge&quot;&gt;
        &lt;h1 v-if=&quot;isShow&quot; style=&quot;background: red; color: white;&quot;&gt;Hello world&lt;/h1&gt;
        &lt;h1 v-if=&quot;age&lt;=18&quot; style=&quot;background: red; color: white;&quot;&gt;Hello world!!!!!!!!!!!!!&lt;/h1&gt;
        
    &lt;/div&gt;
    &lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;
    &lt;script&gt;
        let app = new Vue({
            el:&quot;#app&quot;,
            data:{
                isShow:false,
                age:18
            },
            methods:{
                clickShow:function(){
                    this.isShow = !this.isShow;
                },
                addAge:function(){
                    this.age++;
                }
            }
        })

    &lt;/script&gt;
</code></pre>
<h3 id="v-bind">v-bind</h3>
<figure data-type="image" tabindex="11"><img src="https://uploader.shimo.im/f/Ogm51R70KooXrw0g.png!thumbnail" alt="" loading="lazy"></figure>
<pre><code class="language-html">	&lt;style&gt;
        .active{
            border:5px red solid;
        }
    &lt;/style&gt;

	&lt;div id=&quot;app&quot;&gt;
        &lt;img v-bind:src=&quot;imgSrc&quot; v-bind:title=&quot;imgTitle&quot;&gt;
        &lt;img :src=&quot;imgSrc&quot; :title=&quot;imgTitle&quot; :class=&quot;isActive?'active':''&quot;  @click=&quot;toggleActive&quot;&gt;
        &lt;img :src=&quot;imgSrc&quot; :title=&quot;imgTitle&quot; :class=&quot;{active:isActive}&quot;  @click=&quot;toggleActive&quot;&gt;
    &lt;/div&gt;

    &lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;
    &lt;script&gt;
        let app = new Vue({
            el:&quot;#app&quot;,
            data:{
                imgSrc:&quot;https://uploader.shimo.im/f/DobrHAZrCe80Nbuy.png!thumbnail&quot;,
                imgTitle:&quot;alger空城&quot;,
                isActive:false
            },
            methods:{
                toggleActive:function(){
                    this.isActive = !this.isActive;
                }
            }
        })
    &lt;/script&gt;
</code></pre>
<h3 id="图片轮播案例">图片轮播案例</h3>
<pre><code class="language-html"> 	&lt;div id=&quot;app&quot;&gt;
        &lt;img :src=&quot;imgArr[imgIndex]&quot; alt=&quot;&quot;&gt;
        &lt;a class=&quot;prev&quot; @click=&quot;prev&quot; v-show=&quot;imgIndex!=0&quot;&gt;《&lt;/a&gt;
        &lt;a class=&quot;next&quot; @click=&quot;next&quot; v-show=&quot;imgIndex&lt;imgArr.length-1&quot;&gt;》&lt;/a&gt;
    &lt;/div&gt;

    &lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;
    &lt;script&gt;
        let app = new Vue({
            el: &quot;#app&quot;,
            data: {
                imgArr: [&quot;https://i2.hdslb.com/bfs/archive/ceb867882b8619edbbc271565d1e216e80eb9f7c.jpg@206w_116h_1c_100q.jpg&quot;,
                    &quot;https://i0.hdslb.com/bfs/archive/55656cda5efd43577bf1a34302c2c6c10c37d13d.jpg@206w_116h_1c_100q.jpg&quot;,
                    &quot;https://i0.hdslb.com/bfs/archive/bc20d43d3508e8413a1cfc9bfca4ae7a58495098.jpg@206w_116h_1c_100q.jpg&quot;
                ],
                imgIndex: 0
            },
            methods: {
                prev: function () {
                    this.imgIndex--;
                },
                next: function () {
                    this.imgIndex++;
                }
            }
        })
    &lt;/script&gt;
</code></pre>
<figure data-type="image" tabindex="12"><img src="https://uploader.shimo.im/f/SSVs0R8WJ3AMq3ZI.png!thumbnail" alt="``" loading="lazy"></figure>
<h3 id="v-for">v-for</h3>
<p><strong>根据数据生成列表结构</strong></p>
<figure data-type="image" tabindex="13"><img src="https://uploader.shimo.im/f/wPGHtLe0P94rXtEB.png!thumbnail" alt="" loading="lazy"></figure>
<pre><code class="language-html">	 &lt;div id=&quot;app&quot;&gt;
        &lt;ul&gt;
            &lt;button @click=&quot;add&quot;&gt;添加数据&lt;/button&gt;
            &lt;button @click=&quot;remove&quot;&gt;移除数据&lt;/button&gt;

            &lt;!-- item可以自定义 index是序列号，in为必须 arr是data数据 --&gt;
            &lt;li v-for=&quot;(item,index) in arr&quot;&gt;
                {{ index+1 }}刘俊杰:{{item}}
            &lt;/li&gt;
            &lt;h2 v-for=&quot;item in food&quot; :title=&quot;item.name&quot;&gt;
                {{item.name}}
            &lt;/h2&gt;
        &lt;/ul&gt;
    &lt;/div&gt;

    &lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;
    &lt;script&gt;
        let app = new Vue({
            el: &quot;#app&quot;,
            data: {
                arr: [&quot;北京&quot;, &quot;上海&quot;, &quot;广州&quot;, &quot;深圳&quot;],
                food: [
                    { name: &quot;西红柿炒鸡蛋&quot; },
                    { name: &quot;鱼香肉丝&quot; }
                ]
            },
            methods: {
                add:function(){
                    //增加数据
                    this.food.push({name:&quot;宫保鸡丁&quot;});
                },
                remove:function(){
                    //移除数据
                    this.food.shift();
                }
            }
        })
    &lt;/script&gt;
</code></pre>
<h3 id="v-model">v-model</h3>
<p>获取和设置表单元素的值（<strong>双向数据绑定</strong>）同步更新</p>
<blockquote>
<p>双向绑定，一个更改了，另一个也会改变</p>
</blockquote>
<figure data-type="image" tabindex="14"><img src="https://uploader.shimo.im/f/voTcHNf28Uo83dso.png!thumbnail" alt="" loading="lazy"></figure>
<pre><code class="language-html"> &lt;div id=&quot;app&quot;&gt;
        &lt;input type=&quot;text&quot; v-model=&quot;message&quot; @keyup.enter=&quot;getM&quot;&gt;
        &lt;h2&gt;{{ message }}&lt;/h2&gt;
        &lt;button @click=&quot;setM&quot;&gt;修改message&lt;/button&gt;
    &lt;/div&gt;

    &lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;
    &lt;script&gt;
        let app = new Vue({
            el:&quot;#app&quot;,
            data:{
                message:&quot;黑马程序员&quot;
            },
            methods:{
                getM:function(){
                    alert(this.message);
                },
                setM:function(){
                    this.message=&quot;刘俊杰&quot;;
                }
            }
        })
    &lt;/script&gt;
</code></pre>
<h3 id="记事本案例">记事本案例</h3>
<figure data-type="image" tabindex="15"><img src="https://uploader.shimo.im/f/9tskDPwP9AMLlKfe.png!thumbnail" alt="" loading="lazy"></figure>
<pre><code class="language-html">	&lt;style&gt;
        * {
            margin: 0;
            padding: 0;
        }

        body {
            background-color: #f1f1f1;
        }

        h1 {
            text-align: center;
            line-height: 2em;
            font-weight: normal;
            font-size: 50px;
            color: #a34444;
        }

        #app {
            position: relative;
            width: 500px;
            margin: 0 auto;
            background-color: #ffffff;
            border: #bdbbbb 1px solid;
            border-radius: 3px;
            color: #6d6c6c;
        }

        .app1 {
            width: 500px;
            height: 70px;
            overflow: hidden;
            margin: 0 auto;
            box-sizing: border-box;
            border-bottom: #e6e4e4 2px solid;
            
        }

        .app1&gt;input {
            width: 500px;
            height: 45px;
            padding: 10px 0;
            border: none;
            outline: none;
            background-color: rgba(0, 0, 0, 0);
            font-size: 25px;
            padding-left: 20px;
            color: #6d6c6c;
        }

        .bottom1 {
            width: 490px;
            height: 10px;
            background-color: #ffffff;
            border: #bdbbbb 1px solid;
            border-radius: 3px;
            position: absolute;
            left: 0;
            right: 0;
            margin: 0 auto;
            box-sizing: border-box;
            bottom: -7px;
            z-index: -1;
        }

        .bottom2 {
            width: 475px;
            height: 10px;
            background-color: #ffffff;
            border: #bdbbbb 1px solid;
            border-radius: 3px;
            position: absolute;
            left: 0;
            right: 0;
            margin: 0 auto;
            box-sizing: border-box;
            bottom: -14px;
            z-index: -2;
        }

        .main&gt;ul {
            list-style: none;
        }

        .main&gt;ul li {
            width: 100%;
            height: 70px;
            line-height: 70px;
            font-size: 25px;
            font-weight: 300;
            border-top: #e6dddd 1px solid;
        }

        .main&gt;ul li:nth-child(1) {
            border-top: none;
        }

        .main&gt;ul li span {
            width: 60px;
            text-align: center;
            display: inline-block;
        }

        .main&gt;ul li button {
            float: right;
            margin: 25px 15px;
            color: red;
            background: transparent;
            border: none;
            display: none;
            cursor: pointer;
            outline: none;
        }
        .main&gt;ul li:hover{
            background-color: #edeaea;
        }
        .main&gt;ul li:hover button {
            display: block;
        }
        .main&gt;ul .num-clear{
            height: 30px;
            border-top: #e6dddd 1px solid;
            color: #6d6c6c;
            line-height: 30px;
            font-weight: 300;
            padding: 0 20px;
            font-size: 12px;
        }
        .num-clear .left{
            float: left;
        }
        .num-clear .right{
            float: right;
            cursor: pointer;
        }
    &lt;/style&gt;
	&lt;h1&gt;Alger记事本&lt;/h1&gt;
    &lt;div id=&quot;app&quot;&gt;
        &lt;div class=&quot;app1&quot;&gt;
            &lt;!-- 回车添加 --&gt;
            &lt;input v-model=&quot;inputValue&quot; @keyup.enter=&quot;add&quot; type=&quot;text&quot; placeholder=&quot;请输入任务&quot;&gt;
            &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;section class=&quot;main&quot;&gt;
            &lt;ul&gt;
                &lt;li class=&quot;todo&quot; v-for=&quot;(item,index) in list&quot;&gt;
                    &lt;span&gt;{{ index+1 }}.&lt;/span&gt;
                    &lt;label&gt;{{ item }}&lt;/label&gt;
                    &lt;!-- 删除 --&gt;
                    &lt;button @click=&quot;remove(index)&quot; class=&quot;destory&quot;&gt;✘&lt;/button&gt;
                &lt;/li&gt;
                &lt;div class=&quot;num-clear&quot;&gt;
                    &lt;span class=&quot;left&quot; v-show=&quot;list.length!=0&quot;&gt;
                        &lt;!-- 显示个数 --&gt;
                        &lt;strong&gt;{{ list.length }}&lt;/strong&gt; 条任务
                    &lt;/span&gt;
                    &lt;!-- 清空 --&gt;
                    &lt;span class=&quot;right&quot; @click=&quot;clear&quot; v-show=&quot;list.length!=0&quot;&gt;clear&lt;/span&gt;
                &lt;/div&gt;
            &lt;/ul&gt;
        &lt;/section&gt;
        &lt;!-- 底部装饰 --&gt;
        &lt;div class=&quot;bottom1&quot;&gt;&lt;/div&gt;
        &lt;div class=&quot;bottom2&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;


    &lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;
    &lt;script&gt;
        let app = new Vue({
            el: &quot;#app&quot;,
            data: {
                list: [&quot;写代码&quot;, '吃饭饭', &quot;睡觉觉&quot;],
                inputValue:&quot;&quot;
            },
            methods: {
                add:function(){
                    this.list.push(this.inputValue);
                },
                remove:function(index){
                    //删除指定元素  ，index是由v-for所生成的
                    this.list.splice(index,1);
                },
                clear:function(){
                    this.list=[];
                }
            }
        })
    &lt;/script&gt;
</code></pre>
<h3 id="计算属性">计算属性</h3>
<p><code>computed:</code>可以实现计算</p>
<pre><code class="language-js">let app = new Vue({
    el:&quot;#app&quot;,
    data:{
        math:80,
        english:20,
        physics:50
    },
    methods:{

    },
    computed:{
        sum: function () {
            return this.math+this.english+this.physics;
        },
        avg: function () {
            return Math.round(this.sum/3);
        }
    }
})
</code></pre>
<pre><code class="language-html">&lt;tbody&gt;
    &lt;tr&gt;
        &lt;td&gt;数学&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;text&quot; v-model=&quot;math&quot;/&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;英语&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;text&quot; v-model=&quot;english&quot;/&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;物理&lt;/td&gt;
        &lt;td&gt;&lt;input type=&quot;text&quot; v-model=&quot;physics&quot;/&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;总分&lt;/td&gt;
        &lt;td&gt;{{sum}}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;平均分&lt;/td&gt;
        &lt;td&gt;{{avg}}&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;
</code></pre>
<h3 id="vue组件">*Vue组件</h3>
<p>组件是可复用的 Vue 实例，且带有一个名字：在这个例子中是 我们可以在一个通过 <code>new Vue</code> 创建的 Vue 根实例中，把这个组件作为自定义元素来使用：</p>
<pre><code class="language-js">//新建一个组件名为button-counter，data必须用函数来返回
Vue.component('button-counter', {
  data: function () {
    return {
      count: 0
    }
  },
    //组件写在这个属性里
  template: '&lt;button v-on:click=&quot;count++&quot;&gt;You clicked me {{ count }} times.&lt;/button&gt;'
});
//用一个vue实例才能调用
new Vue({ el: '#components-demo' });
</code></pre>
<p>然后我们就可以在html中直接写<code>&lt;button-counter&gt;&lt;/button-counter&gt;</code>标签即可，当然标签需要写在一个vue的实例中</p>
<p>但是这样做他会在每个vue实例中都会显示，我们也可以把它绑定在一个vue实例中</p>
<pre><code class="language-js">/*
这里只会显示一个按钮
&lt;div id=&quot;app&quot;&gt;
    &lt;alert&gt;&lt;/alert&gt;
&lt;/div&gt;
app2中不显示内容
&lt;div id=&quot;app2&quot;&gt;
    &lt;alert&gt;&lt;/alert&gt;
    &lt;alert&gt;&lt;/alert&gt;
&lt;/div&gt;
*/
//把控件赋值给一个对象
let Alert = {template:'&lt;button @click=&quot;on_click&quot;&gt;弹弹弹&lt;/button&gt;',
                methods: {
                    on_click: function () {
                        alert('hello world');
                    }
                }
            };
//然后在vue实例中用componets属性把
new Vue({
    el: '#app',
    components:{
        alert:Alert,
    }
});
</code></pre>
<p>这样他就只会在id为app的div中显示，其他div中是不显示的</p>
<p>把组件写在js中总是麻烦，我们也可以把它写在html中</p>
<pre><code class="language-html">&lt;script&gt;
    //新建一个叫like的组件
Vue.component('like',{
    //把在HTML中一个template标签中并且id为#like-cheked里的html内容作为组件内容
    template: '#like-cheked',
    data:function () {
        return{
            like_count:10,
            liked:false,
        }
    },
    //这里是他的方法
    methods: {
        toggle_like:function () {
            if(!this.liked){
                this.like_count++;
            }else{
                this.like_count--;
            }
            this.liked = !this.liked;
        }
    }
});
//一个实例
new Vue({
    el:&quot;#app3&quot;,
});
//当然也可以直接绑定摘app3中
&lt;/script&gt;


&lt;div id=&quot;app3&quot;&gt;
    &lt;like&gt;&lt;/like&gt;
&lt;/div&gt;
&lt;template id=&quot;like-cheked&quot;&gt;
    &lt;button @click=&quot;toggle_like()&quot; :class=&quot;{liked:liked}&quot;&gt;
        👍{{like_count}}
    &lt;/button&gt;
&lt;/template&gt;
</code></pre>
<h4 id="组件通信-父子通信">组件通信--父子通信</h4>
<p><code>props:</code>属性.</p>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
    &lt;!-- msg 和username都是要传的参数 --&gt;
    &lt;alert msg=&quot;liujunjie&quot;&gt;&lt;/alert&gt;
    &lt;user username=&quot;刘俊杰&quot;&gt;&lt;/user&gt;
&lt;/div&gt;

&lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
    Vue.component('alert',{
        template:'&lt;button @click=&quot;on_click()&quot;&gt;弹弹弹&lt;/button&gt;',
        //把传入的参数用props属性接收
        props:['msg'],
        methods: {
            on_click:function () {
                //可以用this直接使用
                alert(this.msg);
            }
        }
    });
    Vue.component('user',{
        //同样使用props接收传入的参数，然后在组件中使用
        template: '&lt;a :href=&quot;\'/user/\'+username&quot;&gt;{{username}}&lt;/a&gt;',
        props: ['username'],
    });
    let app = new Vue({
        el:&quot;#app&quot;,
    })
&lt;/script&gt;
</code></pre>
<h4 id="组件通信-子父通信">组件通信--子父通信</h4>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
    &lt;balance&gt;&lt;/balance&gt;
&lt;/div&gt;

&lt;script&gt;

    //这是一个父级组件balance
    Vue.component('balance',{
        //使用了子级组件show  用v-if来控制显示与否
        template:`
            &lt;div&gt;
                &lt;show @show-balance=&quot;show_balance = true&quot;&gt;&lt;/show&gt;
                &lt;div v-if=&quot;show_balance&quot;&gt;还剩98元&lt;/div&gt;
            &lt;/div&gt;
        `,
        data:function () {
            return{
                //定义一个属性控制v-if 默认为false 点击后变成true即可显示余额
                show_balance:false,
            }
        }
    });
    //这是一个子级的组件
    Vue.component('show',{
        template: `
			&lt;button @click=&quot;on_click()&quot;&gt;显示余额&lt;/button&gt;
		`,
        methods: {
            on_click(){
                // 传递参数
                this.$emit('show-balance',{a: 1, b: 2});
            }
        }
    });


    let app = new Vue({
        el:&quot;#app&quot;,
        data:{

        },
        methods:{

        }
    })
&lt;/script&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ Android计算器案例🤖]]></title>
        <id>http://47.93.91.138:5500/android-ji-suan-qi-an-li/</id>
        <link href="http://47.93.91.138:5500/android-ji-suan-qi-an-li/">
        </link>
        <updated>2020-03-13T02:49:26.000Z</updated>
        <summary type="html"><![CDATA[<p>使用简单的网格布局管理器来实现界面🧨<br>
然后使用java代码来实现计算器的操作🎉</p>
]]></summary>
        <content type="html"><![CDATA[<p>使用简单的网格布局管理器来实现界面🧨<br>
然后使用java代码来实现计算器的操作🎉</p>
<!-- more -->
<pre><code class="language-xml">//布局标签属性
android:orientation=&quot;horizontal&quot;    //设置水平方向排列
android:columnCount=&quot;4&quot;              //设置为四列
android:rowCount=&quot;8&quot;                  //设置为八行
//设置布局内组件属性
android:layout_rowWeight=&quot;2&quot;          //设置占两行
android:layout_columnSpan=&quot;4&quot;          //设置占四列
android:layout_gravity=&quot;bottom|right&quot;  //设置位置属性，如果设置前两行必须设置此属性才能使控件铺满
</code></pre>
<h3 id="布局部分代码">布局部分代码</h3>
<pre><code class="language-xml">//这里显示算式
&lt;TextView
    android:id=&quot;@+id/Results&quot;
    android:layout_rowWeight=&quot;2&quot;
    android:layout_columnSpan=&quot;4&quot;
    android:layout_gravity=&quot;bottom|right&quot;
    android:text=&quot;&quot;
    android:paddingEnd=&quot;15dp&quot;
    android:paddingStart=&quot;15dp&quot;
    android:textSize=&quot;40sp&quot; /&gt;
  
//这里显示结果
&lt;TextView
    android:id=&quot;@+id/viewResults&quot;
    android:layout_rowWeight=&quot;2&quot;
    android:layout_columnSpan=&quot;4&quot;
    android:layout_gravity=&quot;bottom|right&quot;
    android:text=&quot;0&quot;
    android:paddingEnd=&quot;15dp&quot;
    android:paddingStart=&quot;15dp&quot;
    android:textSize=&quot;40sp&quot; /&gt;
//这里是按钮，都一样复制改一下 id 和 text
&lt;Button
    android:id=&quot;@+id/btnClear&quot;
    android:layout_width=&quot;wrap_content&quot;
    android:layout_height=&quot;wrap_content&quot;
    android:layout_rowWeight=&quot;1&quot;
    android:layout_columnSpan=&quot;1&quot;
    android:layout_columnWeight=&quot;1&quot;
    android:layout_gravity=&quot;fill&quot;
    android:layout_margin=&quot;0.5dp&quot;
    android:background=&quot;#ffffff&quot;
    android:text=&quot;AC&quot;
    android:textColor=&quot;#f68904&quot;
    android:textSize=&quot;30sp&quot; /&gt;
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://s1.ax1x.com/2020/03/13/8u9OZq.png" alt="8u9OZq.png" loading="lazy"></figure>
<h3 id="后台代码">后台代码</h3>
<pre><code class="language-java">//记得要使用 View.OnClickListener 接口不然不能实现点击事件
public class MainActivity extends AppCompatActivity implements View.OnClickListener {
    //声明对象
    private TextView Results;
    private TextView viewResults;
    private Button btn0;
    private Button btn1;
    private Button btn2;
    private Button btn3;
    private Button btn4;
    private Button btn5;
    private Button btn6;
    private Button btn7;
    private Button btn8;
    private Button btn9;
    private Button btnClear;
    private Button btnBackspace;
    private Button btnBai;
    private Button btnDian;
    private Button btnJia;
    private Button btnJian;
    private Button btnCheng;
    private Button btnChu;
    private Button btnResults;
     //声明一个 StringBuffer 用来存储输入的算式
    private StringBuffer str_display = new StringBuffer();



    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        //给变量复制，即找到对应的控件
        Results = findViewById(R.id.Results);
        viewResults = findViewById(R.id.viewResults);
        btn0 = findViewById(R.id.btn0);
        btn1 = findViewById(R.id.btn1);
        btn2 = findViewById(R.id.btn2);
        btn3 = findViewById(R.id.btn3);
        btn4 = findViewById(R.id.btn4);
        btn5 = findViewById(R.id.btn5);
        btn6 = findViewById(R.id.btn6);
        btn7 = findViewById(R.id.btn7);
        btn9 = findViewById(R.id.btn9);
        btn8 = findViewById(R.id.btn8);
        btnClear = findViewById(R.id.btnClear);
        btnBackspace = findViewById(R.id.btnBackspace);
        btnBai = findViewById(R.id.btnBai);
        btnDian = findViewById(R.id.btnDian);
        btnJia = findViewById(R.id.btnJia);
        btnJian = findViewById(R.id.btnJian);
        btnCheng = findViewById(R.id.btnCheng);
        btnChu = findViewById(R.id.btnChu);
        btnResults = findViewById(R.id.btnResults);
        //给按钮注册监听器
        btn0.setOnClickListener(this);
        btn1.setOnClickListener(this);
        btn2.setOnClickListener(this);
        btn3.setOnClickListener(this);
        btn4.setOnClickListener(this);
        btn5.setOnClickListener(this);
        btn6.setOnClickListener(this);
        btn7.setOnClickListener(this);
        btn8.setOnClickListener(this);
        btn9.setOnClickListener(this);
        btnClear.setOnClickListener(this);
        btnBackspace.setOnClickListener(this);
        btnBai.setOnClickListener(this);
        btnDian.setOnClickListener(this);
        btnJia.setOnClickListener(this);
        btnJian.setOnClickListener(this);
        btnCheng.setOnClickListener(this);
        btnChu.setOnClickListener(this);
        btnResults.setOnClickListener(this);
        

    }
//这是 View.OnClickListener 接口自带的方法
    @Override
    public void onClick(View v) {
        //用 switch 语句来判断点击了那个按钮
        switch (v.getId()){
            case R.id.btn0:
            case R.id.btn1:
            case R.id.btn2:
            case R.id.btn3:
            case R.id.btn4:
            case R.id.btn5:
            case R.id.btn6:
            case R.id.btn7:
            case R.id.btn8:
            case R.id.btn9:
            case R.id.btnDian:
            //在点击了数字和小数点时给 str_display 的 append 属性来向字符串后面添加数字或小数点，这样整个算式就会被 str_display 记录下来
                str_display.append(((Button)v).getText().toString());
                Results.setText(str_display);
                //在点击时可以实时的把运算结果显示出来，用到下面 calculate 的计算方法
                try {
                    viewResults.setText(&quot;=&quot;+calculate(str_display.toString()));
                } catch (Exception e) {
                    e.printStackTrace();
                }
                break;
            case R.id.btnJia:
            case R.id.btnJian:
            case R.id.btnCheng:
            case R.id.btnChu:
            //在点击了+-*/时给 str_display 的 append 属性来向字符串后面添加数字或小数点，这样整个算式就会被 str_display 记录下来
            //在+-*/前后加空格是为了在计算方法中把数字和符号分割开
                str_display.append(&quot; &quot;+((Button)v).getText().toString()+&quot; &quot;);
                Results.setText(str_display);
                break;

            case R.id.btnResults:
            //点击等于按钮时在上面的文本中显示算式和答案，并且清空下面文本
                try {
                    Results.setText(str_display.toString()+&quot;=&quot;+calculate(str_display.toString()));
                } catch (Exception e) {
                    e.printStackTrace();
                }
                str_display = new StringBuffer(&quot;&quot;);
                viewResults.setText(&quot;0&quot;);
                break;

            case R.id.btnClear:
                //点击清空按钮时清空下方文本框以及储存算式的 str_display
                str_display = new StringBuffer(&quot;&quot;);
                viewResults.setText(&quot;0&quot;);
                break;
          
            case R.id.btnBackspace:
            //点击退格按钮时删除 str_display 的最后一位用 deleteCharAt()方法
                str_display.deleteCharAt(str_display.length()-1);
                Results.setText(str_display);
                try {
                    viewResults.setText(&quot;=&quot;+calculate(str_display.toString()));
                } catch (Exception e) {
                    e.printStackTrace();
                }
                break;
        }
    }

//这个计算方法用了栈的原理，不是特别难，对比着画一下图就懂了
    public String calculate(String input1) throws Exception{
        String[] comput = input1.split(&quot; &quot;);
        Stack&lt;Double&gt; stack = new Stack&lt;&gt;();
        Double m = Double.parseDouble(comput[0]);
        stack.push(m);                                      //第一个操作数入栈

        for(int i = 1; i &lt; comput.length; i++) {
            if(i%2==1) {
                if(comput[i].equals(&quot;+&quot;))
                    stack.push(Double.parseDouble(comput[i+1]));
                if(comput[i].equals(&quot;-&quot;))
                    stack.push(-Double.parseDouble(comput[i+1]));
                if(comput[i].equals(&quot;×&quot;)) {                 //将前一个数出栈做乘法再入栈
                    Double d = stack.peek();                //取栈顶元素
                    stack.pop();
                    stack.push(d*Double.parseDouble(comput[i+1]));
                }
                if(comput[i].equals(&quot;÷&quot;)) {                 //将前一个数出栈做乘法再入栈
                    double help = Double.parseDouble(comput[i+1]);
                    if(help == 0)
                        Toast.makeText(getApplicationContext(), &quot;除数不能为 0&quot;, Toast.LENGTH_SHORT).show();//不会继续执行该函数
                    double d = stack.peek();
                    stack.pop();
                    stack.push(d/help);
                }
            }
        }

        double d = 0d;

        while(!stack.isEmpty()) {           //求和
            d += stack.peek();
            stack.pop();   //出栈
        }

        String result = String.valueOf(d);
        return result;
    }
}
</code></pre>
<blockquote>
<p>🚗是不是很简单呐，下一篇见。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[教你用代码写一个实时疫情图😷]]></title>
        <id>http://47.93.91.138:5500/jiao-ni-yong-dai-ma-xie-yi-ge-shi-shi-yi-qing-tu/</id>
        <link href="http://47.93.91.138:5500/jiao-ni-yong-dai-ma-xie-yi-ge-shi-shi-yi-qing-tu/">
        </link>
        <updated>2020-03-13T02:45:31.000Z</updated>
        <summary type="html"><![CDATA[<p>🤧这两天疫情越来越严重，各个大公司都做了<strong>实时疫情图</strong>，这里来教一下大家如何用代码来实现</p>
]]></summary>
        <content type="html"><![CDATA[<p>🤧这两天疫情越来越严重，各个大公司都做了<strong>实时疫情图</strong>，这里来教一下大家如何用代码来实现</p>
<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://s2.ax1x.com/2020/02/04/1DtjL4.png" alt="效果" loading="lazy"></figure>
<p>🔎🔎    <strong><a href="http://alger.cf/practice/">效果网址</a></strong></p>
<p><strong>看起来不错吧，那我们来实时的撸一个。</strong></p>
<p>不会代码的同学可以跳过这儿，直接到文章末尾，有教你怎么调用的。</p>
<h2 id="绘制中国地图">绘制中国地图</h2>
<p>首先，数据的爬取，经过对比，目前能实时显示数据的网站有两家，一个是网易另一个是丁香医生。</p>
<p>那么我们就使用前端+PHP来制作一个这个地图。</p>
<p>要使用JS绘制中国地图，需要选择一个库，目前可以用的前端地图绘制库还是很多的，highmaps的调用是最简单的</p>
<figure data-type="image" tabindex="2"><a href="https://imgchr.com/i/1DUV3V"><img src="https://s2.ax1x.com/2020/02/04/1DUV3V.md.png" alt="1DUV3V.md.png" loading="lazy"></a></figure>
<p>实例的代码量非常少，并且体积控制得最小</p>
<pre><code class="language-js">&lt;div id=&quot;map&quot; style=&quot;width:800px;height: 500px;&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;https://img.hcharts.cn/highmaps/highmaps.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://data.jianshukeji.com/geochina/china.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
// 随机数据
var data = [{&quot;name&quot;:&quot;北京&quot;,&quot;value&quot;:72},{&quot;name&quot;:&quot;天津&quot;,&quot;value&quot;:44},{&quot;name&quot;:&quot;河北&quot;,&quot;value&quot;:90},{&quot;name&quot;:&quot;山西&quot;,&quot;value&quot;:91},{&quot;name&quot;:&quot;内蒙古&quot;,&quot;value&quot;:68},{&quot;name&quot;:&quot;辽宁&quot;,&quot;value&quot;:73},{&quot;name&quot;:&quot;吉林&quot;,&quot;value&quot;:76},{&quot;name&quot;:&quot;黑龙江&quot;,&quot;value&quot;:29},{&quot;name&quot;:&quot;上海&quot;,&quot;value&quot;:18},{&quot;name&quot;:&quot;江苏&quot;,&quot;value&quot;:80},{&quot;name&quot;:&quot;浙江&quot;,&quot;value&quot;:87},{&quot;name&quot;:&quot;安徽&quot;,&quot;value&quot;:58},{&quot;name&quot;:&quot;福建&quot;,&quot;value&quot;:43},{&quot;name&quot;:&quot;江西&quot;,&quot;value&quot;:9},{&quot;name&quot;:&quot;山东&quot;,&quot;value&quot;:89},{&quot;name&quot;:&quot;河南&quot;,&quot;value&quot;:94},{&quot;name&quot;:&quot;湖北&quot;,&quot;value&quot;:16},{&quot;name&quot;:&quot;湖南&quot;,&quot;value&quot;:83},{&quot;name&quot;:&quot;广东&quot;,&quot;value&quot;:76},{&quot;name&quot;:&quot;广西&quot;,&quot;value&quot;:71},{&quot;name&quot;:&quot;海南&quot;,&quot;value&quot;:82},{&quot;name&quot;:&quot;重庆&quot;,&quot;value&quot;:81},{&quot;name&quot;:&quot;四川&quot;,&quot;value&quot;:8},{&quot;name&quot;:&quot;贵州&quot;,&quot;value&quot;:15},{&quot;name&quot;:&quot;云南&quot;,&quot;value&quot;:49},{&quot;name&quot;:&quot;西藏&quot;,&quot;value&quot;:91},{&quot;name&quot;:&quot;陕西&quot;,&quot;value&quot;:64},{&quot;name&quot;:&quot;甘肃&quot;,&quot;value&quot;:58},{&quot;name&quot;:&quot;青海&quot;,&quot;value&quot;:1},{&quot;name&quot;:&quot;宁夏&quot;,&quot;value&quot;:51},{&quot;name&quot;:&quot;新疆&quot;,&quot;value&quot;:90},{&quot;name&quot;:&quot;台湾&quot;,&quot;value&quot;:79},{&quot;name&quot;:&quot;香港&quot;,&quot;value&quot;:31},{&quot;name&quot;:&quot;澳门&quot;,&quot;value&quot;:48},{&quot;name&quot;:&quot;南海诸岛&quot;,&quot;value&quot;:71},{&quot;name&quot;:&quot;南海诸岛&quot;,&quot;value&quot;:7}];
// 初始化图表
var map = new Highcharts.Map('map', {
  title: {
    text: '中国地图'
  },
  colorAxis: {
    min: 0,
    minColor: 'rgb(255,255,255)',
    maxColor: '#006cee'
  },
  series: [{
    data: data,
    name: '随机数据',
    mapData: Highcharts.maps['cn/china'],
    joinBy: 'name' // 根据 name 属性进行关联
  }]
});
&lt;/script&gt;
</code></pre>
<h2 id="数据抓取">数据抓取</h2>
<p>通过分析数据，发现网页的数据不是异步加载的，是直接写在网页里面的</p>
<p>包含了各省市各地区的数据</p>
<figure data-type="image" tabindex="3"><img src="https://mmbiz.qpic.cn/mmbiz_png/HautRxjCevseppUyO4kViaGFF4rCujrcouJ7tic45HkscurWNxTAyaxyqE1C3AakqhrusfqBlMsjWs5XoxRHoa0g/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img" loading="lazy"></figure>
<p>首先把数据截取下来，看看数据的结构，解析后，发现json数据结构如下</p>
<figure data-type="image" tabindex="4"><img src="https://mmbiz.qpic.cn/mmbiz_png/HautRxjCevseppUyO4kViaGFF4rCujrcoicib3scUzVCHqwM6T5ibv0gEkbKQFDIpe92OGzDXKBKJrUFZKlqxGBibsA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img" loading="lazy"></figure>
<p>我们的地图数据肯定是不能直接拿来用的，所以得自己获取数据，解析成上面代码中[{name:'省份',value:人数}]这样的数据。</p>
<p>首先使用PHP爬取数据，并且使用正则表达式截取这一段json</p>
<pre><code class="language-json">$url = &quot;https://3g.dxy.cn/newh5/view/pneumonia&quot;; 
$data = file_get_contents($url);    
$pattern = '/window.getAreaStat = (.*?)\}catch/is';    
preg_match($pattern, $data, $result);   
$list = json_decode($result[1]);
</code></pre>
<p>截取到的数据解析为数组存入变量list</p>
<p>通过遍历，获取到省份和确诊人数</p>
<pre><code class="language-php"> foreach ($list as $item) {    
     $tmp['name'] = $item-&gt;provinceShortName; 
     $tmp['value'] = $item-&gt;confirmedCount;     
     $datalist[] = $tmp;    
 }
</code></pre>
<p>这时候，数据已经变成了我们需要的数据了。</p>
<p>那么，接下来就是修改最开始的前端代码，这儿既然使用PHP，那就直接一步到位，不用异步调用。</p>
<p>并且，为了解决不每次访问都去爬取一次丁香医生的网站，所以访问的功能得单独提取出来，设置为半小时或者一小时实时访问一次，并且把数据存入文件，每次访问前端，就直接读取文件就行了，能加快访问的速度。</p>
<p>使用<strong>宝塔定时任务</strong>，或者手动访问单一PHP文件即可，这儿不多赘述。</p>
<p>最后，设置地图的主题色为红色，并且修改标题内容，简单地图制作完成</p>
<figure data-type="image" tabindex="5"><img src="https://mmbiz.qpic.cn/mmbiz_png/HautRxjCevseppUyO4kViaGFF4rCujrco0yGc3MPPrRtglrquqFtCUxUwLpbjTDUa5JTLn0aSXZdEuyKKEicib2gg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img" loading="lazy"></figure>
<h2 id="调用">调用📢</h2>
<p>大家只需要引用这个网页即可。</p>
<pre><code class="language-html">&lt;iframe src=&quot;https://www.lovestu.com/api/project/cnmapyinqing/obj.php&quot; height=&quot;500&quot; frameborder=&quot;no&quot; border=&quot;0&quot; width=&quot;100%&quot;&gt; &lt;/iframe&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS动画制作旋转木马🦄]]></title>
        <id>http://47.93.91.138:5500/css-dong-hua-zhi-zuo-xuan-zhuan-mu-ma/</id>
        <link href="http://47.93.91.138:5500/css-dong-hua-zhi-zuo-xuan-zhuan-mu-ma/">
        </link>
        <updated>2020-02-14T02:44:30.000Z</updated>
        <summary type="html"><![CDATA[<p>主要用到了<code>animation</code>动画  <code>transform</code>  旋转<code>perspective</code>产生透视效果 控制好图片的距离，理解三维模型，可以很简单的做出旋转木马。</p>
]]></summary>
        <content type="html"><![CDATA[<p>主要用到了<code>animation</code>动画  <code>transform</code>  旋转<code>perspective</code>产生透视效果 控制好图片的距离，理解三维模型，可以很简单的做出旋转木马。</p>
<!-- more -->
<p>代码如下💡</p>
<pre><code class="language-html">&lt;style&gt;

    body{
        /* 规定元素的距离，产生3d透视效果 */
        perspective: 1000px;
        background-color: #dddddd;
    }

    section{
        width: 300px;
        height: 200px;
        margin: 300px auto;
        position: relative;
        /* 让子元素保留其相对位置 */
        transform-style: preserve-3d;
        /* 动画效果 旋转 10s 匀速 循环 */
        animation: rotate 5s linear infinite;
    }

    /* 旋转 */
    @keyframes rotate{
        0%{
            transform: rotateY(0deg) rotate(0);
        }
        100%{
            transform: rotateY(360deg) rotate(0);
        }
    }

    section div{
        font-size: 40px;
        text-align: center;
        color: white;
        width: 100%;
        height: 100%;
        position: absolute;
        top:0;
        left: 0;
        background: url(&quot;https://i0.hdslb.com/bfs/sycp/creative_img/202002/89a3a2fca520c8f6df187878e47af032.jpg@1100w_484h_1c_100q.jpg&quot;) no-repeat;
    }


    section div:nth-child(1){
        transform: translateZ(300px);
    }

    section div:nth-child(2){
        transform: rotateY(60deg) translateZ(300px);
    }
    section div:nth-child(3){
        transform: rotateY(120deg) translateZ(300px);
    }
    section div:nth-child(4){
        transform: rotateY(180deg) translateZ(300px);
    }
    section div:nth-child(5){
        transform: rotateY(240deg) translateZ(300px);
    }

    section div:nth-child(6){
        transform: rotateY(300deg) translateZ(300px);
    }

&lt;/style&gt;


&lt;body&gt;
    &lt;section&gt;
        &lt;div&gt;1&lt;/div&gt;
        &lt;div&gt;2&lt;/div&gt;
        &lt;div&gt;3&lt;/div&gt;
        &lt;div&gt;4&lt;/div&gt;
        &lt;div&gt;5&lt;/div&gt;
        &lt;div&gt;6&lt;/div&gt;
    &lt;/section&gt;
&lt;/body&gt;

</code></pre>
<blockquote>
<p>是不是很简单呢！</p>
<p>下一篇见🧲</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTML+CSS 模仿商品展示 💻]]></title>
        <id>http://47.93.91.138:5500/htmlcss-mo-fang-shang-pin-zhan-shi/</id>
        <link href="http://47.93.91.138:5500/htmlcss-mo-fang-shang-pin-zhan-shi/">
        </link>
        <updated>2020-02-13T02:35:11.000Z</updated>
        <summary type="html"><![CDATA[<p>💁今天我们来实现一个简单的<strong><strong>商品展示</strong></strong>小页面</p>
<p>用到的知识主要是<code>:hover</code>和<code>position</code></p>
]]></summary>
        <content type="html"><![CDATA[<p>💁今天我们来实现一个简单的<strong><strong>商品展示</strong></strong>小页面</p>
<p>用到的知识主要是<code>:hover</code>和<code>position</code></p>
<!-- more -->
<h2 id="html代码️">HTML代码<strong>⬇️</strong></h2>
<pre><code class="language-html">    &lt;!-- 第一个商品 --&gt;

&lt;main&gt;
        &lt;article&gt;
            &lt;div&gt;&lt;img src=&quot;图片链接&quot; alt=&quot;&quot;&gt;&lt;/div&gt;
        &lt;/article&gt;
        &lt;div&gt;
            &lt;h2&gt;小米CC9PRO [一亿像素]&lt;/h2&gt;
            &lt;p&gt;
                &lt;span style=&quot;color: red;&quot;&gt;「分期享6期免息，购机享1TB小米云空间1年使用权」&lt;/span&gt;
                &lt;br&gt; 1亿像素主摄 / 全场景五摄像头 / 四闪光灯 / 3200万自拍 / 10倍混合光学变焦，50倍数字变焦 / 5260mAh ⼤电量 / 标配 30W疾速快充 / ⼩米⾸款超薄屏下指纹 / 德国莱茵低蓝光认证 / 多功能NFC / 红外万能遥控 / 1216超线性扬声器
            &lt;/p&gt;
        &lt;/div&gt;
&lt;/main&gt;

    &lt;!-- 第二个商品 --&gt;
&lt;div class=&quot;sp-page&quot;&gt;
        &lt;div class=&quot;img-box&quot;&gt;
            &lt;img src=&quot;图片链接&quot; alt=&quot;&quot;&gt;
            &lt;div class=&quot;text&quot;&gt;
                &lt;h1&gt;关于图片的介绍&lt;/h1&gt;
                &lt;p&gt;关于图片的介绍关于图片的介于图片于图片的的绍&lt;/p&gt;
                &lt;p&gt;关于图片的介绍于图片的关于图片的介绍&lt;/p&gt;
                &lt;p&gt;关于图片的介绍关于图片的介绍&lt;/p&gt;
                &lt;button&gt;Learn more&lt;/button&gt;
            &lt;/div&gt;
        &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h2 id="css代码️">CSS代码<strong>⬇️</strong></h2>
<pre><code class="language-css">
/*第一个商品*/
     main {
            width: 500px;
            height: 400px;
            background-color: #696969;
            margin: 0 auto;
            border: 5px solid #000;
            overflow: hidden;
        }

        main&gt;article {
            height: 268px;
            overflow: hidden;
            transition: .8s;
        }

        main:hover article {
            height: 0;
        }

        article&gt;div img {
            height: 270px;
        }

        main&gt;div p {
            color: rgba(255, 255, 255, 0);
            transition: 1s;
        }

        main&gt;div {
            color: #ffffff;
            padding: 20px;
            border-top: 5px solid #ffffff;
            box-sizing: border-box;
            transition: 1s;
        }

        main:hover div {
            border: none;
        }

        main:hover div&gt;p {
            color: rgba(255, 255, 255, 1);
        }

        div&gt;h2 {
            font-size: 30pt;
            line-height: 2.8em;
            text-align: center;
        }








/*第二个商品*/

    .sp-page{
        margin: 50px auto;
        width: 400px ;
        height: 215px;
        border: 20px solid #4b4b4b;
        overflow: hidden;

    }
    .sp-page&gt;.img-box{
        width: 390px;
        height: 205px;
        overflow: hidden;
        position: relative;
        border: 5px solid #ffffff;
    }
    .sp-page&gt;.img-box&gt;img{
        width: 390px;
        height: 205px;
        transition: all 0.3s linear 0s;
    }
    .img-box:hover img{
        transform: scale(1.2);
    }
    .text{
        position: absolute;
        top: -100%;
        left: -100%;
        width: 390px;
        height: 205px;
        background-color: #ffffffd0;
        overflow: hidden;
        transition: 1s;
        transition-delay: .5s;
        text-align: center;
    }
    .img-box:hover .text{
        top: 0;
        left: 0;
    }
    button{
        margin: 10px;
        padding: 5px 10px;
        background-color: #2a8d8d;
        color: white;
        border: #000 solid 1px;
        cursor: pointer;
    }
</code></pre>
<p><a href="http://alger.cf/practice/%E4%BE%8B%E5%AD%90/CSS%E5%AE%9E%E7%8E%B0%E5%A4%A9%E7%8C%AB%E5%95%86%E5%93%81%E6%A0%B7%E5%BC%8F.html">👓展示页面</a></p>
]]></content>
    </entry>
</feed>